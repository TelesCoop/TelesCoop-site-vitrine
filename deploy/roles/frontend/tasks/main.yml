- name: Copy {{ project_slug }} nginx config
  template:
    src: nginx.conf.j2
    dest: /etc/nginx/sites-enabled/{{ project_slug }}
    owner: root
    group: root
    mode: 0644
  notify:
    - reload nginx

- name: install node and npm
  apt:
    pkg:
      - nodejs
    state: present

- name: Create base dir
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ main_user }}"
    mode: '2755'
  with_items:
    - "{{ frontend_path }}"

- name: Generate frontend /etc/ssh/ RSA host key
  command: "ssh-keygen -q -t ed25519 -a 100 -f {{ identity_file_path }} -C \"\" -N \"\""
  become_user: "{{ main_user }}"
  args:
    creates: "{{ identity_file_path }}"
  register: frontend_new_ssh_key

- name: WARNING ABOUT new ssh key
  debug:
    msg: |
      IMPORTANT REMINDER

      A new ssh key has been generated at {{ identity_file_path }}
      - it should be added to the project deploy keys in Gitlab/Github
      so that we can clone it.
  when: frontend_new_ssh_key.changed

- name: Get new ssh key contents
  command: "cat {{ identity_file_path }}.pub"
  register: command_output
  when: frontend_new_ssh_key.changed

- name: Print ssh key to console
  debug:
    msg: "{{command_output.stdout}}"
  when: frontend_new_ssh_key.changed

- name: get latest frontend code
  git:
    repo: '{{ frontend_repo }}'
    dest: "{{ frontend_path }}"
    key_file: "{{ identity_file_path }}"
    accept_hostkey: true
    force: true
    version: main
  become_user: "{{ main_user }}"
  register: clonecode

- name: add environment variable file
  template:
    src: frontend.env
    dest: "{{ frontend_path }}/.env"

- name: Get node_version
  shell: "cat {{ frontend_path }}/.nvmrc"
  register: node_version

- name: Install nvm
  ansible.builtin.shell: >
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
  args:
    creates: "{{ ansible_env.HOME }}/.nvm/nvm.sh"

- name: "Install node version {{ node_version.stdout }}"
  shell: "source /root/.nvm/nvm.sh && nvm install {{ node_version.stdout }}"
  args:
    executable: /bin/bash
    creates: "{{ ansible_env.HOME }}/.nvm/{{ node_version.stdout }}_installed"

- name: Install yarn globally
  shell: "source /root/.nvm/nvm.sh && nvm exec {{ node_version.stdout }} npm install -g yarn"
  args:
    executable: /bin/bash
    creates: "{{ ansible_env.HOME }}/.nvm/{{ node_version.stdout }}_yarn_installed"

- name: Install project node dependencies with yarn
  # yamllint disable-line rule:line-length
  shell: "source /root/.nvm/nvm.sh && nvm exec {{ node_version.stdout }} yarn install --frozen-lockfile"
  args:
    chdir: "{{ frontend_path }}"
    executable: /bin/bash
  when: clonecode.changed or force_update is defined

- name: Build code
  command:
    cmd: "npx @11ty/eleventy"
    chdir: "{{ frontend_path }}"
  when: clonecode.changed or force_update is defined
  become_user: "{{ main_user }}"

- name: Make sure project files have the right owner after installs
  file:
    path: "{{ frontend_path }}"
    owner: "{{ main_user }}"
    group: "{{ main_user }}"
    recurse: true
    state: directory
  when: clonecode.changed or force_update is defined

- name: update frontend static folder
  file:
    path: "{{ frontend_static_path }}"
    state: "{{ item }}"
    owner: www-data
    mode: '2755'
  with_items:
    - absent
    - directory

- name: update frontend static folder content
  synchronize:
    src: "{{ frontend_path }}/_site/"
    dest: "{{ frontend_static_path }}"
    rsync_opts:
      - "-og"
      - "--chown=www-data"

  delegate_to: "{{ inventory_hostname }}"
